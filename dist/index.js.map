{"version":3,"sources":["../src/index.js"],"names":["ApolloServer","gql","require","typeDefs","resolvers","Query","test","organizations","root","args","dataSources","OrganizationService","getAllCars","server","OrganizationAPI","formatError","err","listen","then","url","console","log"],"mappings":";;AAAA;;AACA,MAAM;AAAEA,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAAwBC,OAAO,CAAC,eAAD,CAArC;;AAEA,MAAMC,QAAQ,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB;AAqEA,MAAMG,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE,MAAI;AAAC,aAAO,QAAP;AAAgB,KADxB;AAEHC,IAAAA,aAAa,EAAE,CAACC,IAAD,EAAOC,IAAP,EAAa;AAACC,MAAAA;AAAD,KAAb,KACf;AACI,aAAOA,WAAW,CAACC,mBAAZ,CAAgCC,UAAhC,EAAP;AACH;AALE;AADO,CAAlB;AAUA,MAAMC,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC5BG,EAAAA,QAD4B;AAE5BC,EAAAA,SAF4B;AAG5BM,EAAAA,WAAW,EAAE,OAAK;AACdC,IAAAA,mBAAmB,EAAE,IAAIG,yBAAJ;AADP,GAAL,CAHe;AAM5BC,EAAAA,WAAW,EAAGC,GAAD,IAAO;AAChB;AACA,WAAOA,GAAP;AACH;AAT2B,CAAjB,CAAf;AAYAH,MAAM,CAACI,MAAP,CAAc,IAAd,EAAoBC,IAApB,CAAyB,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAS;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBF,GAAI,EAAnC;AACH,CAFD","sourcesContent":["import {OrganizationAPI} from './services';\r\nconst { ApolloServer, gql } = require('apollo-server');\r\n\r\nconst typeDefs = gql`\r\n    type Organization {\r\n        activeCount: String\r\n        actualApartment: String\r\n        actualAreaCode: String\r\n        actualAreaName: String  \r\n        actualBuilding: String\r\n        actualCity: String\r\n        actualDistrict: String\r\n        actualHouse: String \r\n        actualIndex: String\r\n        actualPostIndex: String\r\n        actualStreet: String\r\n        actualTown: String\r\n        blockedCount: String\r\n        contractFnsSend: String\r\n        dateCreate: String\r\n        email: String\r\n        expireFnCount: String\r\n        expireLicenseCount: String\r\n        fnsStatus: String\r\n        fullTitle: String\r\n        full_title: String\r\n        guid: String\r\n        id: String\r\n        inn: String\r\n        irudAction: String\r\n        irudDate: String\r\n        irudId: String\r\n        irudMessage: String\r\n        irudStatus: String\r\n        kpp: String\r\n        legalApartment: String\r\n        legalAreaCode: String\r\n        legalAreaName: String\r\n        legalBuilding: String\r\n        legalCity: String\r\n        legalDistrict: String\r\n        legalHouse: String\r\n        legalIndex: String\r\n        legalPostIndex: String\r\n        legalStreet: String\r\n        legalTown: String\r\n        name: String\r\n        ogrn: String\r\n        patronymic: String\r\n        position: String\r\n        removed: String\r\n        secondName: String\r\n        shortTitle: String\r\n        short_title: String\r\n        smsCount: String\r\n        snils: String   \r\n        statusContract: String\r\n        surname: String\r\n        telephone: String\r\n        totalCount: String\r\n        user_id: String\r\n    }\r\n    type Query {\r\n        organization(number: String!): Organization\r\n        organizations: [Organization]\r\n        test: String\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        test: ()=>{return \"Asdads\"},\r\n        organizations: (root, args, {dataSources})=> \r\n        {\r\n            return dataSources.OrganizationService.getAllCars()\r\n        }\r\n    }\r\n}\r\n\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    dataSources: ()=>({\r\n        OrganizationService: new OrganizationAPI()\r\n    }),\r\n    formatError: (err)=>{\r\n        // console.log(err);\r\n        return err;\r\n    }\r\n})\r\n\r\nserver.listen(5001).then(({url})=>{\r\n    console.log(`Server ready at ${url}`)\r\n})"],"file":"index.js"}