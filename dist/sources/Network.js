import axios from 'axios';
import { isObject, isString } from "../utils";
const baseURL = `https://test.ofd.astralnalog.ru/api/v4.2/`;
export const ASTRAL_TOKEN = 'efde40c5-099d-4cbd-a85a-73b47ab57790';
const network = axios.create({
  baseURL,
  headers: {
    'astral-token': ASTRAL_TOKEN,
    common: {
      "Content-Type": "application/json"
    }
  }
});
network.interceptors.request.use(config => {
  if (config.data) {
    if (isObject(config.data)) config.data = qs.stringify({ ...config.data
    });
    if (isString(config.data)) config.data = qs.parse(config.data);
  }

  return config;
});
network.interceptors.response.use(response => {
  console.log(response);
  return response;
});
export default network;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zb3VyY2VzL05ldHdvcmsuanMiXSwibmFtZXMiOlsiYXhpb3MiLCJpc09iamVjdCIsImlzU3RyaW5nIiwiYmFzZVVSTCIsIkFTVFJBTF9UT0tFTiIsIm5ldHdvcmsiLCJjcmVhdGUiLCJoZWFkZXJzIiwiY29tbW9uIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImNvbmZpZyIsImRhdGEiLCJxcyIsInN0cmluZ2lmeSIsInBhcnNlIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBUUMsUUFBUixFQUFrQkMsUUFBbEI7QUFHQSxNQUFNQyxPQUFPLEdBQUksMkNBQWpCO0FBQ0EsT0FBTyxNQUFNQyxZQUFZLEdBQUcsc0NBQXJCO0FBRVAsTUFBTUMsT0FBTyxHQUFHTCxLQUFLLENBQUNNLE1BQU4sQ0FBYTtBQUMzQkgsRUFBQUEsT0FEMkI7QUFFM0JJLEVBQUFBLE9BQU8sRUFBRTtBQUNQLG9CQUFnQkgsWUFEVDtBQUVOSSxJQUFBQSxNQUFNLEVBQUU7QUFDUCxzQkFBZ0I7QUFEVDtBQUZGO0FBRmtCLENBQWIsQ0FBaEI7QUFVQUgsT0FBTyxDQUFDSSxZQUFSLENBQXFCQyxPQUFyQixDQUE2QkMsR0FBN0IsQ0FBaUNDLE1BQU0sSUFBRTtBQUN2QyxNQUFJQSxNQUFNLENBQUNDLElBQVgsRUFDQTtBQUNBLFFBQUlaLFFBQVEsQ0FBQ1csTUFBTSxDQUFDQyxJQUFSLENBQVosRUFDRUQsTUFBTSxDQUFDQyxJQUFQLEdBQWNDLEVBQUUsQ0FBQ0MsU0FBSCxDQUFhLEVBQUMsR0FBR0gsTUFBTSxDQUFDQztBQUFYLEtBQWIsQ0FBZDtBQUNGLFFBQUlYLFFBQVEsQ0FBQ1UsTUFBTSxDQUFDQyxJQUFSLENBQVosRUFDRUQsTUFBTSxDQUFDQyxJQUFQLEdBQWNDLEVBQUUsQ0FBQ0UsS0FBSCxDQUFTSixNQUFNLENBQUNDLElBQWhCLENBQWQ7QUFDRDs7QUFDRCxTQUFPRCxNQUFQO0FBQ0QsQ0FURDtBQVdBUCxPQUFPLENBQUNJLFlBQVIsQ0FBcUJRLFFBQXJCLENBQThCTixHQUE5QixDQUFtQ00sUUFBRCxJQUNsQztBQUNFQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsUUFBWjtBQUNBLFNBQU9BLFFBQVA7QUFDRCxDQUpEO0FBTUEsZUFBZVosT0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7aXNPYmplY3QsIGlzU3RyaW5nfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5cclxuY29uc3QgYmFzZVVSTCA9IGBodHRwczovL3Rlc3Qub2ZkLmFzdHJhbG5hbG9nLnJ1L2FwaS92NC4yL2BcclxuZXhwb3J0IGNvbnN0IEFTVFJBTF9UT0tFTiA9ICdlZmRlNDBjNS0wOTlkLTRjYmQtYTg1YS03M2I0N2FiNTc3OTAnO1xyXG5cclxuY29uc3QgbmV0d29yayA9IGF4aW9zLmNyZWF0ZSh7XHJcbiAgYmFzZVVSTCxcclxuICBoZWFkZXJzOiB7XHJcbiAgICAnYXN0cmFsLXRva2VuJzogQVNUUkFMX1RPS0VOLFxyXG4gICAgIGNvbW1vbjoge1xyXG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgfVxyXG4gIH0sXHJcbn0pO1xyXG5cclxubmV0d29yay5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoY29uZmlnPT57XHJcbiAgaWYgKGNvbmZpZy5kYXRhKVxyXG4gIHtcclxuICBpZiAoaXNPYmplY3QoY29uZmlnLmRhdGEpKSBcclxuICAgIGNvbmZpZy5kYXRhID0gcXMuc3RyaW5naWZ5KHsuLi5jb25maWcuZGF0YX0pO1xyXG4gIGlmIChpc1N0cmluZyhjb25maWcuZGF0YSkpXHJcbiAgICBjb25maWcuZGF0YSA9IHFzLnBhcnNlKGNvbmZpZy5kYXRhKTsgXHJcbiAgfVxyXG4gIHJldHVybiBjb25maWc7XHJcbn0pXHJcblxyXG5uZXR3b3JrLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoKHJlc3BvbnNlKT0+XHJcbntcclxuICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgcmV0dXJuIHJlc3BvbnNlO1xyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV0d29yazsiXX0=